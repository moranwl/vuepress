(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{323:function(e,a,r){"use strict";r.r(a);var s=r(0),n=Object(s.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"docker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker"}},[e._v("#")]),e._v(" Docker")]),e._v(" "),a("h2",{attrs:{id:"centos安装docker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#centos安装docker"}},[e._v("#")]),e._v(" Centos安装Docker")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo yum install -y yum-utils\nsudo yum-config-manager \\\n--add-repo \\\nhttps://download.docker.com/linux/centos/docker-ce.repo\n\nsudo yum install docker-ce docker-ce-cli containerd.io\n\nsudo systemctl start docker\n\n重启docker\nsystemctl restart docker\n")])])]),a("h2",{attrs:{id:"docker命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker命令"}},[e._v("#")]),e._v(" Docker命令")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("yum -y install docker 安装\nsystemctl start docker 启动\nsystemctl restart docker 重启\nsystemctl stop docker 停止\nsystemctl enable docker 开机自启\ndocker ps -a\ndocker start\ndocker stop\n")])])]),a("h2",{attrs:{id:"docker参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker参数"}},[e._v("#")]),e._v(" Docker参数")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v('-a stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项； \n-d: 后台运行容器，并返回容器ID；\n-i: 以交互模式运行容器，通常与 -t 同时使用；\n-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；\n–name=”nginx-lb”: 为容器指定一个名称；\n–dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致；\n–dns-search example.com: 指定容器DNS搜索域名，默认和宿主一致；\n-h “mars”: 指定容器的hostname；\n-e username=”ritchie”: 设置环境变量；\n–env-file=[]: 从指定文件读入环境变量；\n–cpuset=”0-2” or –cpuset=”0,1,2”: 绑定容器到指定CPU运行；\n-m :设置容器使用内存最大值；\n–net=”bridge”: 指定容器的网络连接类型，支持 bridge/host/none/Container: 四种类型；\n–link=[]: 添加链接到另一个容器；\n–expose=[]: 开放一个端口或一组端口；\n-p 端口\n-e TZ="Asia/Shanghai" 设置时区\n')])])]),a("h2",{attrs:{id:"docker安装镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker安装镜像"}},[e._v("#")]),e._v(" Docker安装镜像")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v('sudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.json <<-\'EOF\'\n{\n    "registry-mirrors": [\n    "https://wi134sj6.mirror.aliyuncs.com",\n    "https://docker.mirrors.ustc.edu.cn",\n    "https://mirror.baidubce.com",\n    "https://reg-mirror.qiniu.com"\n    ]\n}\nEOF\n重启\nsystemctl daemon-reload\nsystemctl restart docker  \n')])])]),a("h2",{attrs:{id:"docker相关错误"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker相关错误"}},[e._v("#")]),e._v(" Docker相关错误")]),e._v(" "),a("h3",{attrs:{id:"如果报证书或者时间错误"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如果报证书或者时间错误"}},[e._v("#")]),e._v(" 如果报证书或者时间错误")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("#安装\nyum install ntpdate\n#同步时间\nntpdate cn.pool.ntp.org\n")])])]),a("h3",{attrs:{id:"vm和docker冲突问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vm和docker冲突问题"}},[e._v("#")]),e._v(" vm和docker冲突问题：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("注销docker\nwsl --unregister docker-desktop\nwsl --unregister docker-desktop-data\n想玩docker的话：\n以管理员身份运行cmd：\nbcdedit /set hypervisorlaunchtype auto\n重启；\n想玩虚拟机的话：\n以管理员身份运行cmd：\nbcdedit /set hypervisorlaunchtype off\n重启。\n")])])]),a("h3",{attrs:{id:"windows设置docker启动后占用内存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#windows设置docker启动后占用内存"}},[e._v("#")]),e._v(" windows设置docker启动后占用内存")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("打开docker 先报错让其下载内核\nhttps://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi # X64/x32架构内核\n\n控制面板-程序-关闭功能- hyper-v 去掉勾 、虚拟机平台去掉勾（如果还报错，把勾勾上）\n\nwindows设置docker启动后占用内存问题\nC:\\Users\\用户名, 创建一个  .wslconfig 的文件  注意前面有个点，别设置太小\n添加内容如下:\n\n\n[wsl2]\nprocessors=8\nmemory=4GB\nswap=4GB\nlocalhostForwarding=true\n\nmemory=内存大小 swap=交换空间 processors=CPU内核数量\n报错后重置wsl\npower shell 打开\n输入\nwsl --shutdown\nnetsh winsock reset\n成功打开docker\n")])])]),a("h2",{attrs:{id:"docker可视化工具-portainer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker可视化工具-portainer"}},[e._v("#")]),e._v(" Docker可视化工具 Portainer")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("安装docker可视化工具 Portainer\n\nportainer本身就是一个容器\n创建一个外链\ndocker volume create portainer_data\n运行一个Portainer容器\ndocker run -d --name portainer -p 9010:9000 --restart always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer\n\n安装汉化版Portainer容器（需要将文件先放到root下）\ndocker run -d -p 9000:9000 --name portainer --restart always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data -v /root/public:/public portainer/portainer\n\n安装完需要重置Portainer密码\n先停掉Portainer容器\n拉取工具\ndocker pull portainer/helper-reset-password\n运行工具\ndocker run --rm -v portainer_data:/data portainer/helper-reset-password\n先启动Portainer容器 输入重置后的密码\n")])])]),a("h2",{attrs:{id:"docker安装redis"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker安装redis"}},[e._v("#")]),e._v(" Docker安装Redis")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v('docker network create redis-net\n运行redis 设置端口\ndocker run --name redis -d -h redis -p 6379:6379 --restart always --network redis-net redis redis-server --appendonly yes --requirepass "ztf123"\n')])])]),a("h2",{attrs:{id:"docker安装nacos"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker安装nacos"}},[e._v("#")]),e._v(" Docker安装Nacos")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("docker run -d  \\\n--env MODE=standalone  \\\n-e MODE=standalone  \\\n-e PREFER_HOST_MODE=hostname  \\\n-e SPRING_DATASOURCE_PLATFORM=mysql  \\\n-e MYSQL_SERVICE_HOST=地址  \\\n-e MYSQL_SERVICE_PORT=3306  \\\n-e MYSQL_SERVICE_USER=账号  \\\n-e MYSQL_SERVICE_PASSWORD=密码  \\\n-e MYSQL_SERVICE_DB_NAME=nacos  \\\n-e JVM_XMS=512m -e JVM_XMX=512m  \\\n--platform linux/amd64  \\\n-p 8848:8848  \\\n--name nacos  \\\n--restart=always  \\\nnacos/nacos-server:1.4.1\n")])])]),a("h2",{attrs:{id:"docker安装elasticsearch、kibana和logstash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker安装elasticsearch、kibana和logstash"}},[e._v("#")]),e._v(" Docker安装Elasticsearch、Kibana和Logstash")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v('运行elasticsearch 设置端口和备用端口 设置内存\nmkdir -p /opt/elasticsearch/plugins\nmkdir -p /opt/elasticsearch/data\n授予权限chmod 777 /opt/elasticsearch/data\n\ndocker run -p 9200:9200 -p 9300:9300 --name elasticsearch --restart=always \\\n-e "discovery.type=single-node" \\\n-e ES_JAVA_OPTS="-Xms1024m -Xmx1024m" \\\n-v /opt/elasticsearch/plugins:/usr/share/elasticsearch/plugins \\\n-v /opt/elasticsearch/data:/usr/share/elasticsearch/data \\\n-d elasticsearch:7.14.1\n\n安装中文分词器\n#下载地址：https://github.com/medcl/elasticsearch-analysis-ik/releases\n1.下载elasticsearch-analysis-ik-7.14.1.zip\n2.上传解压：unzip elasticsearch-analysis-ik-7.14.1.zip -d /opt/ik-analyzer\n3.上传到es容器：docker cp /opt/ik-analyzer 容器id:/usr/share/elasticsearch/plugins\n4.重启es：docker restart 容器id\n\n运行kibana 设置端口\ndocker run -d --name kibana --restart always --net elastic -p 5601:5601 kibana:7.14.1\n\n进入容器修改：docker exec -it kibana /bin/bash\ncd config\nvi kibana.yml\nelasticsearch.hosts: [ "http://地址:9200" ]\ndocker restart kibana 重启kibana ！\n\n运行logstash 设置端口\ndocker run --name logstash -p 5044:5044 --restart=always --link elasticsearch:es -v /mydata/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf -d logstash:7.14.1\n# 需要提前在linux服务器上环境 /mydata/logstash/logstash.conf\nlogstash.conf\ninput {\n    tcp {\n    mode => "server"\n    host => "0.0.0.0"\n    port => 5044\n    codec => json_lines\n    }\n}\nfilter{\n\n}\noutput {\n    elasticsearch {\n    hosts => "ip:9200"\n    index => "gmall-%{+YYYY.MM.dd}"\n    }\n}\n')])])]),a("h2",{attrs:{id:"安装rabbitmq"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装rabbitmq"}},[e._v("#")]),e._v(" 安装Rabbitmq")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("docker run -d --name rabbitmq -p 15672:15672 -p 5672:5672 -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=密码   rabbitmq:management\n\n运行一个rabbitmq 镜像 账号admin 密码ztf123\n\nrabbitmq:management是指rabbitmq的web管理端\n\n安装延迟队列插件\n1.首先下载rabbitmq_delayed_message_exchange-3.9.0.ez文件上传到RabbitMQ所在服务器，下载地址：https://www.rabbitmq.com/community-plugins.html\n2.切换到插件所在目录，执行 docker cp rabbitmq_delayed_message_exchange-3.9.0.ez rabbitmq:/plugins 命令，将刚插件拷贝到容器内plugins目录下\n3.执行 docker exec -it rabbitmq /bin/bash 命令进入到容器内部，并 cd plugins 进入plugins目录\n4.执行 ls -l|grep delay  命令查看插件是否copy成功\n5.在容器内plugins目录下，执行 rabbitmq-plugins enable rabbitmq_delayed_message_exchange  命令启用插件\n6.exit命令退出RabbitMQ容器内部，然后执行 docker restart rabbitmq 命令重启RabbitMQ容器\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);
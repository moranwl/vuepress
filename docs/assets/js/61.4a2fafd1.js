(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{376:function(s,t,e){"use strict";e.r(t);var a=e(0),r=Object(a.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"关系型sql标准"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#关系型sql标准"}},[s._v("#")]),s._v(" 关系型SQL标准")]),s._v(" "),t("p"),t("div",{staticClass:"table-of-contents"},[t("ul",[t("li",[t("a",{attrs:{href:"#flag"}},[s._v("Flag")])]),t("li",[t("a",{attrs:{href:"#ddl-dml-dql-dcl-tcl"}},[s._v("DDL/DML/DQL/DCL/TCL")])]),t("li",[t("a",{attrs:{href:"#tree树形结构"}},[s._v("TREE树形结构")])]),t("li",[t("a",{attrs:{href:"#sql1992"}},[s._v("SQL1992")])]),t("li",[t("a",{attrs:{href:"#sql1999"}},[s._v("SQL1999")]),t("ul",[t("li",[t("a",{attrs:{href:"#自连接"}},[s._v("自连接")])]),t("li",[t("a",{attrs:{href:"#子查询"}},[s._v("子查询")])]),t("li",[t("a",{attrs:{href:"#分页查询"}},[s._v("分页查询")])]),t("li",[t("a",{attrs:{href:"#连接查询"}},[s._v("连接查询")])]),t("li",[t("a",{attrs:{href:"#case"}},[s._v("CASE")])])])]),t("li",[t("a",{attrs:{href:"#sql2003"}},[s._v("SQL2003")])])])]),t("p"),s._v(" "),t("h2",{attrs:{id:"flag"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#flag"}},[s._v("#")]),s._v(" Flag")]),s._v(" "),t("blockquote",[t("p",[s._v("Structured Query Language：SQL92、SQL99、SQL-86、SQL-89、SQL:2003、SQL:2008、SQL:2011、SQL:2016")])]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://standards.iso.org/ittf/PubliclyAvailableStandards/index.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://standards.iso.org/ittf/PubliclyAvailableStandards/index.html"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"https://cloud.tencent.com/developer/article/1442564",target:"_blank",rel:"noopener noreferrer"}},[s._v("SQL标准简介"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"https://developer.aliyun.com/article/745815",target:"_blank",rel:"noopener noreferrer"}},[s._v("数据库必知词汇：SQL标准"),t("OutboundLink")],1)])]),s._v(" "),t("blockquote",[t("p",[s._v("在标准 SQL 中，字符串使用的是单引号。")])]),s._v(" "),t("blockquote",[t("p",[s._v("如果字符串本身也包括单引号，则使用两个单引号（注意，不是双引号，字符串中的双引号不需要另外转义）。")])]),s._v(" "),t("blockquote",[t("p",[s._v("有些SQL中使用双引号字符串，是其它的数据库对 SQL 的扩展，比如在MySQL中允许使用单引号和双引号两种。")])]),s._v(" "),t("blockquote",[t("p",[s._v("保留字不能用于表名，比如desc，此时需要加入反引号来区别，但使用表名时可忽略反引号。")]),s._v(" "),t("p",[s._v("保留字不能用于字段名，比如desc，此时也需要加入反引号，并且insert等使用时也要加上反引号")])]),s._v(" "),t("h2",{attrs:{id:"ddl-dml-dql-dcl-tcl"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ddl-dml-dql-dcl-tcl"}},[s._v("#")]),s._v(" DDL/DML/DQL/DCL/TCL")]),s._v(" "),t("ul",[t("li",[s._v("DDL(Data Definition Language) 数据定义语言，用于定义和管理 SQL 数据库中的所有对象的语言\n"),t("ol",[t("li",[s._v("CREATE - 创建")]),s._v(" "),t("li",[s._v("ALTER - 修改")]),s._v(" "),t("li",[s._v("DROP - 删除")]),s._v(" "),t("li",[s._v("TRUNCATE - 截断/移除，立即回收磁盘空间，而不需要后续的VACUUM操作")]),s._v(" "),t("li",[s._v("COMMENT - 注释")]),s._v(" "),t("li",[s._v("RENAME - 重命名")])])]),s._v(" "),t("li",[s._v("DML(Data Manipulation Language) 数据操纵语言，用于SQL中处理数据等操作统称为数据操纵语言，对模式对象内的数据执行查询\n"),t("ol",[t("li",[s._v("INSERT - 添加")]),s._v(" "),t("li",[s._v("UPDATE - 更新")]),s._v(" "),t("li",[s._v("DELETE - 删除")]),s._v(" "),t("li",[s._v("CALL - 调用")]),s._v(" "),t("li",[s._v("EXPLAIN PLAN - 解释")]),s._v(" "),t("li",[s._v("LOCK TABLE - 锁，用于控制并发")])])]),s._v(" "),t("li",[s._v("DQL(Data Query Language) 数据查询语言，根据传递给它的查询获取一些模式关系\n"),t("ol",[t("li",[s._v("SELECT - 用于从数据库中检索数据")])])]),s._v(" "),t("li",[s._v("DCL(Data Control Language) 数据控制语言，用来授予或回收访问数据库的某种特权\n"),t("ol",[t("li",[s._v("GRANT - 授权 允许对象的创建者给某用户或某组或所有用户(PUBLIC)某些特定的权限。")]),s._v(" "),t("li",[s._v("REVOKE - 收回已经授予的权限")])])]),s._v(" "),t("li",[s._v("TCL(Transaction Control Language) 事务控制语言/存储过程控制预言\n"),t("ol",[t("li",[s._v("COMMIT - 提交保存已完成的工作")]),s._v(" "),t("li",[s._v("SAVEPOINT - 在事务中设置保存点，可以回滚到此处")]),s._v(" "),t("li",[s._v("ROLLBACK - 回滚")]),s._v(" "),t("li",[s._v("SET TRANSACTION - 改变事务特性选项")])])])]),s._v(" "),t("p",[t("img",{attrs:{src:"/images/ddl-dml-dcl.png",alt:""}}),s._v(" "),t("img",{attrs:{src:"/images/ddl-dml-dcl-tcl.png",alt:""}}),s._v(" "),t("img",{attrs:{src:"/images/SQL%E8%AF%AD%E8%A8%80.png",alt:""}})]),s._v(" "),t("h2",{attrs:{id:"tree树形结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tree树形结构"}},[s._v("#")]),s._v(" TREE树形结构")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("start with 起始位置 connect by prior 本级=上级")])]),s._v(" "),t("li",[t("code",[s._v("start with 起始位置 connect by 本级=上级")])]),s._v(" "),t("li",[t("code",[s._v("connect by 本级=上级")])])]),s._v(" "),t("p",[t("img",{attrs:{src:"/images/sql-tree.jpg",alt:""}})]),s._v(" "),t("h2",{attrs:{id:"sql1992"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sql1992"}},[s._v("#")]),s._v(" SQL1992")]),s._v(" "),t("h2",{attrs:{id:"sql1999"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sql1999"}},[s._v("#")]),s._v(" SQL1999")]),s._v(" "),t("p",[t("strong",[s._v("sql分类")])]),s._v(" "),t("blockquote",[t("p",[t("code",[s._v("+")]),s._v(" 在哪一边的列，该表就补充null")])]),s._v(" "),t("ol",[t("li",[s._v("cross join 交叉连接 （笛卡尔积，表乘表） ，不需要on关键字")]),s._v(" "),t("li",[s._v("natural join 自然连接 （找两个表中相同的列，进行等值匹配），不需要on关键字")]),s._v(" "),t("li",[s._v("inner join 内连接\n"),t("ul",[t("li",[s._v("必须有on关键字，on表示连接条件")]),s._v(" "),t("li",[s._v("inner 关键字可以省略")])])]),s._v(" "),t("li",[s._v("outer join 外连接，outer关键字可以省略\n"),t("ul",[t("li",[s._v("left outer join 左外连接，"),t("code",[s._v("+")]),s._v(" 在等号右边")]),s._v(" "),t("li",[s._v("right outer join 右外连接，"),t("code",[s._v("+")]),s._v(" 在等号左边")]),s._v(" "),t("li",[s._v("full outer join 全外连接")])])]),s._v(" "),t("li",[s._v("等值连接 表的连接条件使用 "),t("code",[s._v("=")])]),s._v(" "),t("li",[s._v("非等值连接 表的连接条件使用 "),t("code",[s._v(">、>=、 <、<=、!=、any")]),s._v(" 等")]),s._v(" "),t("li",[s._v("自连接 自己连接自己")])]),s._v(" "),t("p",[t("strong",[s._v("sql99语法：通过join关键字实现连接")])]),s._v(" "),t("ul",[t("li",[s._v("含义：1999年推出的sql语法")]),s._v(" "),t("li",[s._v("支持： 等值连接、非等值连接 （内连接）、外连接")])]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" 字段，"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" 表"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n【"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("inner")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("left")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("outer")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("right")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("outer")]),s._v("】"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("join")]),s._v(" 表"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("on")]),s._v("  连接条件\n【"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("inner")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("left")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("outer")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("right")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("outer")]),s._v("】"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("join")]),s._v(" 表"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("on")]),s._v("  连接条件\n【"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" 分组前筛选条件】\n【"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("group")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" 分组字段】\n【"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("having")]),s._v(" 分组后的筛选条件】\n【"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("order")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" 最后执行的，排序的字段或表达式】\n")])])]),t("blockquote",[t("p",[s._v("好处：语句上，连接条件和筛选条件实现了分离，简洁明了！")])]),s._v(" "),t("h3",{attrs:{id:"自连接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自连接"}},[s._v("#")]),s._v(" 自连接")]),s._v(" "),t("ul",[t("li",[s._v("cross join：自然连接。主要用于产生笛卡尔积。\n"),t("ul",[t("li",[t("code",[s._v("select * from emp cross join dept;")])])])]),s._v(" "),t("li",[s._v("natural join：自然连接。这种情况下，数据库会自动找到一个字段来消除笛卡尔积。一般来说，数据库会找那些通过外键约束关联的字段。因此，有较大的局限性。\n"),t("ul",[t("li",[t("code",[s._v("select * from emp natural join dept;")])])])])]),s._v(" "),t("blockquote",[t("p",[s._v("案例：查询员工名和直接上级的名称")])]),s._v(" "),t("ul",[t("li",[s._v("sql99")])]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("last_name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("m"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("last_name\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees e\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("JOIN")]),s._v(" employees m "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ON")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("manager_id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("m"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("employee_id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("ul",[t("li",[s._v("sql92")])]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("last_name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("m"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("last_name\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("employees m \n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("manager_id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("m"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("employee_id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("h3",{attrs:{id:"子查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#子查询"}},[s._v("#")]),s._v(" 子查询")]),s._v(" "),t("blockquote",[t("p",[s._v("含义：一条查询语句中又嵌套了另一条完整的select语句，其中被嵌套的select语句，称为子查询或内查询在外面的查询语句，称为主查询或外查询")])]),s._v(" "),t("p",[t("strong",[s._v("特点：")])]),s._v(" "),t("ol",[t("li",[s._v("子查询都放在小括号内")]),s._v(" "),t("li",[s._v("子查询可以放在from后面、select后面、where后面、having后面，但一般放在条件的右侧")]),s._v(" "),t("li",[s._v("子查询优先于主查询执行，主查询使用了子查询的执行结果")]),s._v(" "),t("li",[s._v("子查询根据查询结果的行数不同分为以下两类：\n"),t("ul",[t("li",[s._v("单行子查询，结果集只有一行，一般搭配单行操作符使用："),t("code",[s._v("> < = <> >= <=")]),s._v("，非法使用子查询的情况：\n"),t("ul",[t("li",[s._v("子查询的结果为一组值")]),s._v(" "),t("li",[s._v("子查询的结果为空")])])]),s._v(" "),t("li",[s._v("多行子查询，结果集有多行，一般搭配多行操作符使用：any、all、in、not in\n"),t("ul",[t("li",[s._v("in： 属于子查询结果中的任意一个就行")]),s._v(" "),t("li",[s._v("any和all往往可以用其他查询代替")])])])])])]),s._v(" "),t("h3",{attrs:{id:"分页查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分页查询"}},[s._v("#")]),s._v(" 分页查询")]),s._v(" "),t("blockquote",[t("p",[s._v("应用场景：实际的web项目中需要根据用户的需求提交对应的分页查询的sql语句")])]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" 字段"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("表达式"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" 表\n【"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" 筛选条件】\n【"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("group")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" 分组字段】\n【"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("having")]),s._v(" 分组后的筛选条件】\n【"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("order")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" 排序的字段】\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("limit")]),s._v(" 【起始的记录索引，】 每页的记录数"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[t("strong",[s._v("特点：")])]),s._v(" "),t("ol",[t("li",[s._v("起始条目索引从0开始")]),s._v(" "),t("li",[s._v("limit子句放在查询语句的最后")]),s._v(" "),t("li",[s._v("公式："),t("code",[s._v("select * from  表 limit （page-1）*sizePerPage, sizePerPage")]),s._v(" "),t("ul",[t("li",[s._v("假如：每页显示条目数sizePerPage,要显示的页数 page")])])])]),s._v(" "),t("p",[t("strong",[s._v("Oracle分页")])]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" rownum "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" rn"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" first_name "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" first_name "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" some_table "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("order")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" first_name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" rn "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" rn "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("200")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" ncallernm"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" tol "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" tmp_86 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("group")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" ncallernm "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("order")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" tol "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("desc")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" rownum"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" OB_CALL_DATA_LOG rownum"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("101")]),s._v("  minus  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" OB_CALL_DATA_LOG rownum"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v("\n")])])]),t("h3",{attrs:{id:"连接查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#连接查询"}},[s._v("#")]),s._v(" 连接查询")]),s._v(" "),t("ul",[t("li",[s._v("连接查询的分类：\n"),t("ul",[t("li",[s._v("按年代分为sql192标准仅仅支持内连接，sql199标准支持内连接，左外连接，右外连接，交叉连接\n   - 按功能分为内连接，外连接，交叉连接")])])])]),s._v(" "),t("p",[t("strong",[s._v("sql92标准：内连接包括")])]),s._v(" "),t("ol",[t("li",[s._v("等值连接："),t("code",[s._v("select name,boyname form boys,beauty where beauty.boyfriend_id = boys.id;")]),s._v(" "),t("ul",[t("li",[s._v("多表等值连接的结果为多表的交集部分;n表连接至少需要n-1个连接条件;多表的顺序没有要求;一般需要为表起别名")])])]),s._v(" "),t("li",[s._v("非等值连接："),t("code",[s._v("select salary,grade_level form employees e,job_grades g where salary between g.'lowest_sal' and 'highest_sal';")])]),s._v(" "),t("li",[s._v("自连接："),t("code",[s._v("select e.employee_id,e.last_name,m.employee_id,m.last_name from employees e,employees m where e.'manager_id' = m.'employee_id';")])])]),s._v(" "),t("p",[t("strong",[s._v("sql99语法：包括内连接(inner)，外连接(left outer ,right outer,full outer)，交叉连接(cross join)")])]),s._v(" "),t("blockquote",[t("p",[s._v("语法："),t("code",[s._v("select 查询列表 form 表1 别名 【连接类型】 join 表2 别名 on 连接条件 【where 筛选条件】")])])]),s._v(" "),t("blockquote",[t("p",[s._v("特点：添加排序，分组，筛选，inner可以省略，筛选条件放在where后面，连接条件放在on后面，提高分离性")])]),s._v(" "),t("ol",[t("li",[t("p",[s._v("内连接："),t("code",[s._v("select 查询列表 form 表1 别名 inner join 表2 别名 on 连接条件")])]),s._v(" "),t("ul",[t("li",[s._v("等值连接："),t("code",[s._v("select last_name,department_name form employee e inner join department d on e.'department_id' = d.'department_id';")])]),s._v(" "),t("li",[s._v("非等值连接："),t("code",[s._v("select  salary,grade_level from employee e join job_grades g on e.'salary' between g.'lowest_sal' and g.'highest_sal' group by grade_level;")])]),s._v(" "),t("li",[s._v("自连接: "),t("code",[s._v("select e.last_name,m.last_name from employees e join employees m on e.'manager_id' = m.'employee_id' where e.'last_name' like '%k%';")])])])]),s._v(" "),t("li",[t("p",[s._v("外连接：用于查询一个表中有，一个表中没有的，外连接的查询结果是主表中的所有记录 如果从表中有和它匹配的值，则显示出来，没有显示null")]),s._v(" "),t("ul",[t("li",[s._v("左外连接，left join左边的是主表： "),t("code",[s._v("select b.name,bo.* form beauty b left outer join boys bo on b.'boyfriend_id' = bo.'id';")])]),s._v(" "),t("li",[s._v("右外连接，right join右边的是主表： "),t("code",[s._v("select b.name,bo.* form boys bo right outer join  beauty b on b.'boyfriend_id' = bo.'id';")])]),s._v(" "),t("li",[s._v("全外连接，等于内连接的结果，加上表1有但表2没有的，加上表2有表一没有的 use girls; "),t("code",[s._v("select b.*,bo.* from beauty b full outer join boys bo on b.'boyfriend_id' = 'bo.id';")])]),s._v(" "),t("li",[s._v("交叉连接："),t("code",[s._v("select b.*,bo.* form beauty b cross join boys bo;")])])])])]),s._v(" "),t("h3",{attrs:{id:"case"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#case"}},[s._v("#")]),s._v(" CASE")]),s._v(" "),t("blockquote",[t("p",[s._v("同其他编程语言中的"),t("code",[s._v("switch...case")]),s._v("或"),t("code",[s._v("if...else")]),s._v("语句，可以直接在"),t("code",[s._v("order by")]),s._v(" 后面使用自定义排序")])]),s._v(" "),t("blockquote",[t("p",[s._v("Case函数在满足了某个符合条件后，剩下的条件将会被自动忽略，因此，即使满足多个条件，执行过程中也只认第一个条件。\n在使用 CASE WHEN时，可以把它当作一个没有字段名的字段，字段值根据条件确认，在需要使用字段名时可以是用 "),t("code",[s._v("as")]),s._v(" 来定义别名。")])]),s._v(" "),t("ul",[t("li",[s._v("简单Case函数")])]),s._v(" "),t("blockquote",[t("p",[s._v("简单Case函数胜在简洁，但是它只适用于这种单字段的单值比较")])]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CASE")]),s._v(" sex\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHEN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'0'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("THEN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'男'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHEN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'1'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("THEN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'男'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHEN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'2'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("THEN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'女'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ELSE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'其他'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("END")]),s._v("\n")])])]),t("ul",[t("li",[s._v("Case搜索函数")])]),s._v(" "),t("blockquote",[t("p",[s._v("Case搜索函数的优点在于适用于所有比较的情况")])]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CASE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHEN")]),s._v(" sex "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'1'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" sex "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'0'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("THEN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'男'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHEN")]),s._v(" sex "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'2'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("THEN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'女'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ELSE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'其他'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("END")]),s._v("\n")])])]),t("h2",{attrs:{id:"sql2003"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sql2003"}},[s._v("#")]),s._v(" SQL2003")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://docs.aws.amazon.com/zh_cn/redshift/latest/dg/c_Window_functions.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("窗口函数"),t("OutboundLink")],1)])]),s._v(" "),t("blockquote",[t("p",[s._v("开窗函数（分析函数）简介:与聚合函数一样，开窗函数也是对行集组进行聚合计算，但是它不像普通聚合函数那样每组只返回一个值\n，开窗函数可以为每组返回多个值，因为开窗函数所执行聚合计算的行集组是窗口")])]),s._v(" "),t("blockquote",[t("p",[s._v("窗口函数是一种分析型的OLAP函数，OLAP是online analytical processing的简称，意思是对数据库数据进行实时分析处理")])]),s._v(" "),t("p",[t("strong",[s._v("窗口函数可以用在以下两种函数：")])]),s._v(" "),t("ol",[t("li",[s._v("专用窗口函数：\n"),t("ul",[t("li",[t("code",[s._v("rank()")]),s._v("：按升序顺序，如果有并列名次的行，会占用下一名次的位置。")]),s._v(" "),t("li",[t("code",[s._v("dese_rank()")]),s._v("：按降序顺序，如果并列名次的行，不占用下一名次的位置。")]),s._v(" "),t("li",[t("code",[s._v("row_number()")]),s._v("：不考虑并列名次的情况。")])])]),s._v(" "),t("li",[s._v("聚合函数："),t("code",[s._v("sun()")]),s._v(","),t("code",[s._v("avg()")]),s._v(","),t("code",[s._v("count()")]),s._v(","),t("code",[s._v("max()")]),s._v(","),t("code",[s._v("min()")])]),s._v(" "),t("li",[s._v("向前向后取值："),t("code",[s._v("lag()")]),s._v("，"),t("code",[s._v("lead()")])]),s._v(" "),t("li",[s._v("百分位："),t("code",[s._v("percent_rank()")])]),s._v(" "),t("li",[s._v("取值函数："),t("code",[s._v("first_value()")]),s._v("，"),t("code",[s._v("last_value()")]),s._v("，"),t("code",[s._v("nth_value()")])]),s._v(" "),t("li",[s._v("分箱函数："),t("code",[s._v("ntile()")])])]),s._v(" "),t("p",[t("strong",[s._v("窗口函数语法")])]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("窗口函数"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("over")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("partition")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("用于分组的列名"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("order")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("用于排序的列名"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),t("p",[t("strong",[s._v("应用场景：")])]),s._v(" "),t("ol",[t("li",[s._v("topN问题")]),s._v(" "),t("li",[s._v("经典排名问题")]),s._v(" "),t("li",[s._v("在每个组里比较的问题")])])])}),[],!1,null,null,null);t.default=r.exports}}]);